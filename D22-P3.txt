class Disjointset{
    public:
    vector<int>size,par;

    Disjointset(int n){
        size.resize(n+1);
        par.resize(n+1);
        for(int i=0;i<=n;i++){
            par[i]=i;
            size[i]=1;
        }
    }

    int findpar(int node){
        if(node == par[node])return node;
        return par[node]= findpar(par[node]);
    }

    void unionbysize(int u,int v){
        int pu=findpar(u);
        int pv=findpar(v);
        if(pu==pv)return;

        if(size[pu]<size[pv]){
            par[pu]=pv;
            size[pv]+=size[pu];
        }
        else if(size[pv]<=size[pu]){
            par[pv]=pu;
            size[pu]+=size[pv];
        }
    }
};
class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int n=stones.size();
        Disjointset ds(n);
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++)
            if(stones[i][0]==stones[j][0] || stones[i][1]==stones[j][1]){
                ds.unionbysize(i,j);
            }
        }
        int cnt=0;
        for(int i=0;i<n;i++){
            if(ds.par[i]==i)cnt++;
        }
        return n- cnt;
    }
};