class Disjointset{
    public:
    vector<int>size,par;

    Disjointset(int n){
        size.resize(n+1);
        par.resize(n+1);
        for(int i=0;i<=n;i++){
            par[i]=i;
            size[i]=1;
        }
    }

    int findpar(int node){
        if(node == par[node])return node;
        return par[node]= findpar(par[node]);
    }

    void unionbysize(int u,int v){
        int pu=findpar(u);
        int pv=findpar(v);
        if(pu==pv)return;

        if(size[pu]<size[pv]){
            par[pu]=pv;
            size[pv]+=size[pu];
        }
        else if(size[pv]<=size[pu]){
            par[pv]=pu;
            size[pu]+=size[pv];
        }
    }
};
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& conn) {
        Disjointset ds(n);
        int extraedges=0;
        for(auto it:conn){
            int u=it[0];
            int v=it[1];
            if(ds.findpar(u)==ds.findpar(v)){
                extraedges++;
            }
            else{
            ds.unionbysize(u,v);
            }

        }
       int components=0;
       for(int i=0;i<n;i++){
        if(ds.par[i]==i)components++;
       }
       if(extraedges>=components-1)return components-1;
       return -1;
    }
};